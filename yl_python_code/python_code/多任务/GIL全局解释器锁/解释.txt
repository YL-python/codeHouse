GIL：全局解释器锁  每个线程在执行的过程前都需要获取GIL
来保证同一时刻只有一个线程可以执行
多线程的时候先抢锁 来保证同一时刻只有一个线程执行

GIL是CPython解释器的问题 不是Python程序的问题
Python解释器  官网推荐的是用 C 写出来的
Python刚发明出来的时候还没有多核处理器

多核处理器的时候执行多线程 只有一个核会被占满 另外的核不会被占用 这就是GIL问题
比如 电脑是八核处理器但是执行多线程的时候只有一个核被占满努力工作
而另外七个核会在边上看着那个核工作
虽然只有一个核工作但是还是多任务的

多线程的好处 一个线程需要等待的时候就跳到下一个线程执行节约等待时间
GIL 坏处是同一时刻只能执行一个线程

问题： 爬虫在 GIL锁存在的情况下 多线程是否比单线程快
 多线程还是要比单线程快
 比如代码有三个地方需要请求网络 如果网络延迟比较严重的话 三个地方都需要等待
 但是多线程是三个一起执行有延迟的地方就跳到下一个线程 这样就可以节约等待的时间
 三个等待同时等待变成一个等待节约时间


 程序分两大类 计算密集型和IO密集型

 计算密集型： 程序没有延时并且一直在做大量的计算 主要是CPU工作
 假设程序有两个地方需要大量的计算并且计算之间没有关联
 这个时候用多线程分别执行两个计算的时候 因为GIL的存在
 实际上还是要等一个计算完成才会执行下一个计算
 所以 时间和单线程没有区别  推荐使用进程

 IO密集型：输入输出 读写 网络请求  用到了硬盘
 推荐使用线程协程 虽然有GIL但是还是可以节省等待时间


 解决GIL：
 1、换解释器 不用CPython
 2、把线程用别的语言来写（什么语言都行） Python来执行别的语言写的代码